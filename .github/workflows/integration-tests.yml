name: Integration Tests (API)

on:
  workflow_dispatch:
    inputs:
      cucumber_tags:
        description: "Select the Cucumber tag suite to run"
        required: true
        type: choice
        options:
          - "@smoke"
          - "@regression"
          - "@integration"

permissions:
  contents: read
  pages: write # Required for deployment
  id-token: write # Required for OIDC authentication with Pages

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start backend stack
        run: |
          echo "Starting backend stack..."
          docker compose \
            --env-file ./config/.env.dev \
            -f docker-compose.yml \
            up -d --build db backend

      - name: Run API Tests and generate Allure results
        if: always()
        run: |
          docker compose \
            --env-file ./config/.env.dev \
            -f docker-compose.yml \
            run --rm api-tests sh -c "
              cd /api-tests && \
              mvn clean test \
                -Dcucumber.filter.tags='${{ github.event.inputs.cucumber_tags }}' \
                -Dallure.results.directory=target/allure-results \
                -Dmaven.test.failure.ignore=true \
                -Dtest='com.project.api.tests.*Test,CucumberRunnerTest'
            "

      - name: Upload Allure JSON results (Raw data)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-api-raw
          path: api-tests/target/allure-results
          retention-days: 7 # Keep raw data for a week

      - name: Stop stack
        if: always()
        run: |
          echo "Stopping Docker stack..."
          docker compose -f docker-compose.yml down

  allure-report-publish:
    needs: integration-tests
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure JSON results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-api-raw
          path: api-tests/target/allure-results

      - name: Load Allure History
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: ${{ github.ref }}
          path: allure-history

      - name: Install Allure CLI
        run: |
          echo "Installing Allure CLI..."
          ALLURE_VERSION="2.27.0"
          ALLURE_DIST="allure-commandline-$ALLURE_VERSION.zip"
          curl -L -o "$ALLURE_DIST" "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/$ALLURE_VERSION/$ALLURE_DIST"
          unzip "$ALLURE_DIST" -d /opt
          sudo mv /opt/allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          echo "Allure version:"
          allure --version

      - name: Generate Allure HTML report
        run: |
          echo "Generating Allure report using installed CLI..."
          mkdir -p api-tests/target/allure-report
          HISTORY_PATH="allure-history/api-tests/target/allure-report/history"
          if [ -d "$HISTORY_PATH" ]; then
            echo "Copying previous Allure history from $HISTORY_PATH..."
            cp -R "$HISTORY_PATH" api-tests/target/allure-results/
          else
            echo "Previous Allure history not found. Generating without history merge."
          fi
          allure generate api-tests/target/allure-results -o api-tests/target/allure-report --clean

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'api-tests/target/allure-report'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4